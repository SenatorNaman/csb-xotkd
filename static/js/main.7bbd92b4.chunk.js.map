{"version":3,"sources":["ImageList/ImageList.js","Columns/Columns.js","App.js","index.js"],"names":["ImageList","props","console","log","draggableId","src","name","index","id","provided","className","ref","innerRef","draggableProps","dragHandleProps","path","alt","Columns","col","imageList","droppableId","droppableProps","map","data","placeholder","App","useState","column1","column2","column3","columns","setColumns","onDragEnd","source","destination","undefined","start","end","newList","filter","_","idx","splice","newCol","state","newStartList","newStartCol","newEndList","newEndCol","Object","values","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7bbd92b4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport \"../ImageList/ImageList.css\";\n\nconst ImageList = (props) => {\n  console.log(\"Image List Props==>\", props);\n  return (\n    <Draggable draggableId={props.src.name} index={props.id}>\n      {(provided) => (\n        <div\n          className=\"itemLayout\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <img src={props.src.path} alt={props.name} />\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default ImageList;\n","import React from \"react\";\nimport ImageList from \"../ImageList/ImageList\";\nimport \"../Columns/Columns.css\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nconst Columns = ({ col }) => {\n  console.log(\"Columns Props==>\", col);\n  const { id, imageList } = col;\n  return (\n    <Droppable droppableId={id}>\n      {(provided) => (\n        <div className=\"columnStyle\">\n          <h2>{id}</h2>\n          <div\n            className=\"rowStyle\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {imageList.map((data, index) => (\n              <ImageList src={data} id={index} />\n            ))}\n            {provided.placeholder}\n          </div>\n        </div>\n      )}\n    </Droppable>\n  );\n};\n\nexport default Columns;\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport Columns from \"./Columns/Columns\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nexport default function App() {\n  const initialData = {\n    column1: {\n      id: \"column1\",\n      imageList: [\n        {\n          name: \"first\",\n          path: \"/images/first.jpeg\"\n        },\n        {\n          name: \"second\",\n          path: \"/images/second.jpeg\"\n        },\n        {\n          name: \"third\",\n          path: \"/images/third.jpeg\"\n        }\n      ]\n    },\n    column2: {\n      id: \"column2\",\n      imageList: []\n    },\n    column3: {\n      id: \"column3\",\n      imageList: []\n    }\n  };\n  const [columns, setColumns] = useState(initialData);\n  console.log(columns);\n  const onDragEnd = ({ source, destination }) => {\n    console.log(source, destination);\n    // Checking if its a valid destination\n    if (destination === undefined || destination === null) return null;\n    const start = columns[source.droppableId];\n    console.log(\"start==>\", start);\n    console.log(\"destination==>\", destination);\n    const end = columns[destination.droppableId];\n\n    if (start === end) {\n      // Start by making a new list without the dragged item\n      const newList = start.imageList.filter((_, idx) => idx !== source.index);\n      newList.splice(destination.index, 0, start.imageList[source.index]);\n\n      if (\n        source.droppableId === destination.droppableId &&\n        destination.index === source.index\n      )\n        return null;\n\n      const newCol = {\n        id: start.id,\n        imageList: newList\n      };\n\n      // Update the state\n      setColumns((state) => ({ ...state, [newCol.id]: newCol }));\n      return null;\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      const newStartList = start.imageList.filter(\n        (_, idx) => idx !== source.index\n      ); // Create a new start column\n      console.log(\"newStartList\", newStartList);\n      // Create a new start column\n      const newStartCol = {\n        id: start.id,\n        imageList: newStartList\n      };\n      console.log(\"newStartCol\", newStartCol);\n      // Make a new end list array\n      const newEndList = end.imageList;\n      console.log(\"newEndList\", newEndList);\n      // Insert the item into the end list\n      newEndList.splice(destination.index, 0, start.imageList[source.index]);\n      console.log(\"newEndList123\", newEndList);\n\n      // Create a new end column\n      const newEndCol = {\n        id: end.id,\n        imageList: newEndList\n      };\n\n      // Update the state\n      setColumns((state) => ({\n        ...state,\n        [newStartCol.id]: newStartCol,\n        [newEndCol.id]: newEndCol\n      }));\n      return null;\n    }\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"columnContainer\">\n        {Object.values(columns).map((col) => (\n          <Columns col={col} key={col.id} />\n        ))}\n      </div>\n    </DragDropContext>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}